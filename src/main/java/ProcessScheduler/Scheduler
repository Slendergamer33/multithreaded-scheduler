package ProcessScheduler;

import java.util.Comparator;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;

public class Scheduler {
	private String schedulerAlgorithm = null;
	private long timeQuantum = 0;
	private boolean quantumExpired = false;
	private Queue<ProcessControlBlock> readyQueue = null;
	private EventLog log = null;

	public Scheduler(Queue<ProcessControlBlock> readyQueue, String schedulerAlgorithm, long timeQuantum, EventLog log) {
		this.log = log;
		this.schedulerAlgorithm = schedulerAlgorithm;
		this.timeQuantum = timeQuantum;
		this.readyQueue = readyQueue;
	}

	public String getAlgorithm() {
		return this.schedulerAlgorithm;
	}

	public long getQuantum() {
		return this.timeQuantum;
	}

	public boolean getQuantumExpired() {
		return this.quantumExpired;
	}

	public Queue<ProcessControlBlock> getReadyQueue() {
		return readyQueue;
	}

	/**
	 * Method to add a pcb to ready queue.
	 *
	 * @param PCB
	 */
	public synchronized void addToReadyQueue(ProcessControlBlock PCB) {
		getReadyQueue().add(PCB);
	}

	/**
	 * Method to run algorithm corresponding to what the runtime arguments specify.
	 */
	public int runAlgorithm() {
		if (getAlgorithm().equalsIgnoreCase("FCFS")) {
			FCFS();
			return 1;
		} else if (getAlgorithm().equalsIgnoreCase("RR")) {
			RR();
			return 2;
		} else if (getAlgorithm().equalsIgnoreCase("Priority")) {
			priorityScheduling();
			return 3;
		}
		return -1;
	}

	public void priorityScheduling() {
		List<ProcessControlBlock> sortedList = new ArrayList<>(readyQueue);
		sortedList.sort(Comparator.comparingInt(ProcessControlBlock::getPriority));
		for (ProcessControlBlock pcb : sortedList) {
			readyQueue.remove(pcb);
			log.add("Running process: " + pcb.printProcessControlBlock());
			CPU cpu = new CPU(pcb, log);
			cpu.start();
			try {
				cpu.join();
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}
			log.add("Finished process: " + pcb.printProcessControlBlock());
		}
	}


	/**
	 * First Come, First Served algorithm.
	 */
	public void FCFS() {
		while (!readyQueue.isEmpty()) {
			ProcessControlBlock pcb = readyQueue.poll();
			log.add("Running process: " + pcb.printProcessControlBlock());
			CPU cpu = new CPU(pcb, log);
			cpu.start();
			try {
				cpu.join();
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}
			log.add("Completed process: " + pcb.printProcessControlBlock());
		}
	}


	/**
	 * Round Robin algorithm.
	 */
	public void RR() {
		LinkedList<ProcessControlBlock> tempQueue = new LinkedList<>(readyQueue);
		while (!tempQueue.isEmpty()) {
			ProcessControlBlock pcb = tempQueue.poll();
			if (pcb.getCPUBurstTime() > timeQuantum) {
				log.add("Running process " + pcb.printProcessControlBlock() + " for only " + timeQuantum + "ms");
				CPU cpu = new CPU(pcb, log, false, timeQuantum);
				cpu.start();
				try {
					cpu.join();
				} catch (InterruptedException e) {
					Thread.currentThread().interrupt();
				}
				pcb.setCPUBurstTime(pcb.getCPUBurstTime() - timeQuantum);
				tempQueue.add(pcb);
			} else {
				log.add("Running process: " + pcb.printProcessControlBlock() + " until finished");
				CPU cpu = new CPU(pcb, log);
				cpu.start();
				try {
					cpu.join();
				} catch (InterruptedException e) {
					Thread.currentThread().interrupt();
				}
				log.add("Finished process: " + pcb.printProcessControlBlock());
			}
		}
	}

}